package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _asset_index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x54\x5b\x6e\xe3\x36\x1b\xdd\x8a\x7e\x02\xf3\xe4\x38\x94\x2f\x72\x1c\x47\x12\x40\x3b\xbe\x2a\xbe\xc7\xfe\xad\xbe\x51\x12\x2d\xd1\x21\x29\x99\xa4\x6c\xd9\x83\xac\xa0\x40\x5f\xba\x86\xee\xa1\x2f\xd3\xd5\x14\x45\xbb\x8b\x42\xf1\x4c\xd1\x01\xfa\x22\xf1\x1c\x7c\x1f\x78\xbe\xcb\xa1\xfd\xbf\xe7\x79\xef\xd5\x5f\xf4\x8d\x44\x73\xe6\xda\xe5\xd7\x60\x58\xc4\x0e\xb8\x26\xd5\x11\x16\x0a\xb8\x76\x42\x70\xe4\xda\x9c\x68\x6c\x84\x09\x96\x8a\x68\x07\x6c\x5e\x07\xd5\x36\x70\x6d\x46\xc5\x9b\x21\x09\x73\x80\x4a\x52\xa9\xc3\x5c\x1b\x34\x4c\x05\x48\x24\xd9\x3b\x20\xc2\x1a\x77\x28\xc7\x31\x81\x99\x88\x9f\x02\xac\x48\xab\x79\x47\xb7\xdd\xf9\xea\x6c\x7a\xc3\x38\x45\x08\xa1\xd9\x7a\x93\xf4\x37\x31\x42\xa8\x5b\x42\xb4\xec\x21\xbf\xfc\xef\xdb\xf0\x31\x29\xd9\xc9\x86\xf5\x97\xdb\x65\xf3\xb5\xd9\x78\x3d\x5d\xf4\x68\xb3\x3a\x8c\xda\x51\xd4\x18\x4c\xd4\x74\x32\x99\x4d\xbc\xd5\xfc\xf9\xd0\xf5\x0f\xde\x76\x42\xfd\x97\xae\x5f\x8c\x93\xc9\x7a\x93\x79\x95\xee\x7c\xaa\x14\x5f\xbc\x78\x63\x9f\xf9\x7c\xb6\x5a\xff\x30\xf1\x76\x99\x19\x88\xfa\x43\xc3\x9f\x5f\x1b\xf3\xa6\x75\x85\xf3\x8a\x80\xb3\xf6\x42\x12\x4e\x4e\xdb\x78\xb8\x1f\xa8\xf3\x61\x54\x0f\xb7\xcd\x5c\xd6\x76\xe6\xa1\x3e\x5e\x98\x0f\xc9\xdc\x6a\x2e\xfc\x73\x82\xf2\x56\xe3\xe4\xc5\xc3\x03\x59\xed\x66\xc3\xfa\x52\xb5\xda\x03\x1c\xb2\xf3\x40\x92\xe9\xb6\xd5\x95\x3d\xf4\x5c\x2f\x76\x08\x07\xeb\x13\x89\x0a\x8e\x86\xfd\x33\xdd\x4e\x9b\xd4\x3a\xf6\xe2\xcd\x02\x6f\x7a\x92\x4c\xcf\xe6\xe0\x51\x15\x8d\x01\x6f\xa7\xd7\x29\x1a\x57\x0e\xc3\x4b\x52\x99\x59\x64\x6a\xcd\x50\x10\xf7\x9e\x67\xcd\x63\xdc\x35\xb3\xc0\xdc\xe7\x78\xb7\x8d\xf5\x14\xad\x86\x33\x69\xe5\xf9\xe0\x98\x5d\x5a\xd6\x19\x85\x93\x97\x76\xc3\xa3\x3d\x88\x42\x6f\x05\xb9\x37\xde\x5d\x58\xf6\x16\xe0\x60\xce\xd0\xd6\x47\x45\x01\x1b\xfe\xb4\x56\x89\xe2\xbe\xf5\xe8\x43\xb4\x5b\xb2\xe4\xd2\x2c\x36\x6f\xfd\x23\x95\x9e\x19\x55\x46\xc7\x6b\x26\x54\xfc\xc0\xd0\x30\xca\x5e\xf2\x41\x4d\x8e\xfd\x4d\x73\x3f\x82\xb0\x5f\x0c\xae\x4b\xab\x65\xb6\xd5\xe3\xe4\x78\x0c\x2f\xf4\x2d\xc5\xf4\x71\xfd\xff\x38\xba\x8c\xf7\x6a\x48\xf2\xb4\x3e\x1e\xed\xad\xd7\xf9\xc7\xdc\xd0\x7a\xb3\x9d\xaf\x3c\xab\xe7\x8f\xc7\x0e\x80\x5f\x37\x44\x60\x4e\x1c\x70\xa2\xe4\x9c\xa5\x52\x83\x30\x15\x9a\x08\xed\x80\x33\x8d\x74\xe2\x44\xe4\x44\x43\x52\xfd\x00\x77\x06\x15\x54\x53\xcc\xaa\x2a\xc4\x8c\x38\xb5\x7b\xf3\xce\xe0\xb8\xa0\x3c\xe7\xff\xa6\x72\x45\xe4\x07\xc6\x01\x23\x8e\x09\x5c\x5b\x53\xcd\x88\x9b\xc9\xb4\xb8\x18\x51\x7a\x16\x2c\xc5\x91\x0d\x6f\xac\xad\xf4\x85\x11\x97\x63\x2a\x3e\x73\x2a\x6e\x57\x75\x5a\xe6\xa7\x27\x8e\x8b\x7f\x90\x99\x15\x4f\x1c\xcb\x98\x8a\x8e\x69\xe0\x5c\xa7\x4f\xfb\x54\xe8\xaa\xa2\x57\xd2\x29\xaa\x0c\xcb\x98\xbc\xdf\xe7\x92\x7d\xbe\x25\xd4\x4c\xf3\xd3\x53\x42\x68\x9c\xe8\x4e\xe3\xbb\x5c\xd3\x28\xb1\x61\xbe\xdf\x07\x5a\xfc\x47\xb4\x55\x46\x07\xa9\x8c\x88\xac\x4a\x1c\xd1\x5c\x75\xac\xac\x78\xb7\xe1\x4d\xa6\x0d\x6f\xe6\x0a\xd2\xe8\xe2\xda\xa5\x68\xd7\xde\xa7\x92\x1b\x38\xd4\x34\x15\x0e\x80\x80\x13\x9d\xa4\x91\x03\x62\xa2\x4b\xbf\xe1\x80\x30\xd7\x56\x19\x16\xee\xb7\xd2\x8d\xd2\x84\x1d\x1b\x7e\x90\x36\x15\x59\xae\x0d\x7d\xc9\x88\x03\x72\xc9\x40\xc8\xb0\x52\xb7\xe3\x6d\x36\xa5\x35\x01\xa7\x82\x11\x11\xeb\xc4\x01\x35\x13\x70\x5c\x7c\x43\x96\x69\x82\x8c\xe1\x90\x24\x29\x8b\x88\x74\xc0\xef\xbf\xfe\xf8\xe7\x97\x2f\x7f\xfd\xfc\xdb\x1f\x3f\xfd\x02\x34\x0e\xa8\x88\x48\xe1\x80\x1a\x28\xdb\xb6\x4f\xc3\x5c\x19\x92\x1c\x73\x2a\x49\x04\x5d\x1b\x7e\x15\x18\x48\xf8\xbd\x14\x95\x07\x9c\x6a\x70\xc2\x2c\x27\x0e\x58\x6b\x5c\x2e\xc7\x4d\x5a\xa0\x45\xb9\x3e\xb0\x2c\xdc\xb5\xe1\xad\x0b\xf0\xd6\x12\xf8\xf1\x2e\xfd\x1d\x00\x00\xff\xff\xc7\x02\xc9\x3b\xa7\x04\x00\x00")

func asset_index_html() ([]byte, error) {
	return bindata_read(
		_asset_index_html,
		"../asset/index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"../asset/index.html": asset_index_html,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"..": &_bintree_t{nil, map[string]*_bintree_t{
		"asset": &_bintree_t{nil, map[string]*_bintree_t{
			"index.html": &_bintree_t{asset_index_html, map[string]*_bintree_t{
			}},
		}},
	}},
}}
